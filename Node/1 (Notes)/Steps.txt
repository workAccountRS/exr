1) Require Files IN app.js

const notes= require("./notes.js");




2) TEST THE Files


3) ADD YARGS COMMANDS 
const yargs = require("yargs");

yargs.command({
    command: 'add',
    describe: 'ADD A NEW NOTE!',
    handler: () => {
        console.log('ADDING NEW NOTE')
    }

})

4) RUN -> NOT WORKING 
add -> yargs.parse()


5) ADD THE BUILDER (TO ADD ARGUMENTS) -> AND PRINT ARGV.title

yargs.command({
    command: 'add',
    describe: 'ADD A NEW NOTE!',
    builder: {
        title: {
            describe: 'Note Title',
            demandOption: true,
            type: 'string'
        },
        body: {
            describe: 'Note Body',
        },
    },
    handler: (argv) => {
        console.log("ADDING A NEW NOTE!!!" , argv.title, argv.body);
    }
})


6) IN notes.js

const addNote = (title, body) =>{

    console.log("-TITLE: " + title)
    console.log("-BODY: " + body)

}

7) ADD THIS FUNCTION TO THE 'add' command (in app.js)
   handler: (argv) => {
        console.log("ADDING A NEW NOTE!!!" , argv.title, argv.body);
        notes.addNote( argv.title, argv.body)
    }

8) RUN -> ERROR
-> EXPORT

9) to notes.js add
module.exports = {
    addNote: addNote
}

10) also add laodNotes to load the saved notes (if any)

const loadNotes = () =>{
    try {
    const dataBuffer = fs.readFileSync('notes.json')
    const dataJSON = dataBuffer.toString()
    return JSON.parse(dataJSON);
    }
    catch (e){
        return []
    }
}

11) PUSH THE NEW NOTE
const addNote = (title, body) =>{

    console.log("-TITLE: " + title)
    console.log("-BODY: " + body)

    const notes = loadNotes()
    console.log(notes)

    notes.push({
        title: title,
        body: body
    })
    
    console.log(notes)

}

12) ADD saveNotes (require fs) -> to addNote
// CHECK WITHOUT stringify

const saveNotes = (notes) => {
    notes = JSON.stringify(notes)
    fs.writeFileSync('notes.json' , notes)
}

13) RUN AND TEST MULTIPLE TIMES

notes.js:::

const fs = require('fs')
console.log('HELLO FROM NOTES')

const addNote = (title, body) =>{

    console.log("-TITLE: " + title)
    console.log("-BODY: " + body)

    const notes = loadNotes()

    notes.push({
        title: title,
        body: body
    })
    

    saveNotes(notes)

}

const saveNotes = (notes) => {
    notes = JSON.stringify(notes)
    fs.writeFileSync('notes.json' , notes)
}


const loadNotes = () =>{
    try {
    const dataBuffer = fs.readFileSync('notes.json')
    const dataJSON = dataBuffer.toString()
    return JSON.parse(dataJSON);
    }
    catch (e){
        return []
    }
}

module.exports = {
    addNote: addNote
}

=================================

app.js:::

const notes= require("./notes.js");
const yargs = require("yargs");

yargs.command({
    command: 'add',
    describe: 'ADD A NEW NOTE!',
    builder: {
        title: {
            describe: 'Note Title',
            demandOption: true,
            type: 'string'
        },
        body: {
            describe: 'Note Body',
        },
    },
    handler: (argv) => {
        console.log("ADDING A NEW NOTE!!!" , argv.title, argv.body);
        notes.addNote( argv.title, argv.body)
    }

})

yargs.parse()


==================================


14) CHECK FOR DUPLICATES BEFORE ADDING

    const duplicateNotes = notes.filter((note) => {
        return note.title == title
    })

    // or -> const duplicateNote = notes.find((note) => note.title == title)



15) ADD ONLY IF NOT DUPLICATES

if (duplicateNotes.length == 0) {
    notes.push({
        title: title,
        body: body
    })

    saveNotes(notes)
    console.log('NEW NOTE ADDED')
}
else{
    console.log('NEW NOTE NOT ADDED - TITLE TAKEN')

}   

=================================

16) ADD REMOVE COMMAND (WHICH TAKES A --title)

yargs.command(
    {
        command: 'remove',
        describe: 'REMOVE A NOTE',
        builder: {
            title: {
                describe: 'TITLE',
                demandOption: true
            }
            
        },
    handler: (argv) => {
            console.log('REMOVING NOTE!!! ' + argv.title)
            notes.removeNote(argv.title)
        }
    
})

============================

17) ADD REMOVE NOTE TO THE EXPORTS

const removeNote = (title) => {
    console.log("REMOVE: " , title)
}

===========================

18) Finish the Function:

const removeNote = (title) => {
    console.log("REMOVE: " , title)
    const notes = loadNotes()

    const newNotes = notes.filter((note) => {
        return note.title != title
    })

    if(notes.length > newNotes.length){
        saveNotes(newNotes)
        console.log('NOTE REMOVED')
    }
    else{
        console.log('NO NOTE FOUND MATCHING THIS TITLE')

    }

}

=====================================

OPTIONAL: ADD LIST NOTES

const listNotes = (showBody = false) => {
    const notes = loadNotes()

    if(notes.length == 0) {
        console.log('EMPTY LIST OF NOTES!!!')
    }
    else{
        notes.forEach(note => {
            if(showBody){
                console.log("TITLE: " + note.title + " BODY: " + note.body)
            }
            else{
                console.log(note.title)
            }
        });
    }

}

=====================================